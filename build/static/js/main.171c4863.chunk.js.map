{"version":3,"sources":["helpers/formatters.js","components/Blockie.jsx","components/Address/Address.jsx","components/Account/WalletIcons/Coin98.png","components/Account/WalletIcons/wallet-connect.svg","components/Account/WalletIcons/MathWallet.svg","components/Account/WalletIcons/TokenPocket.svg","components/Account/WalletIcons/SafePal.svg","components/Account/Account.jsx","components/Chains/Chains.jsx","components/Wallet/Wallet.jsx","components/NativeBalance.jsx","components/QuickStart.jsx","components/MenuItems.jsx","eth.png","components/Ramper.jsx","components/NFTBalance.jsx","nftapi.png","App.jsx","serviceWorkerRegistration.js","index.js"],"names":["getEllipsisTxt","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","currency","str","n","slice","length","Blockie","Address","Account","Chains","Text","Typography","Title","CheckableTag","Tag","styles","card","boxShadow","border","borderRadius","small","width","top","Wallet","isServerInfo","url","Moralis","useMoralis","useState","hi","setHi","owners","setOwners","avaxC","setAvaxC","ethC","setEthC","maticC","setMaticC","avax1","setAvax1","a","options","chain","address","limit","Web3API","token","getNFTOwners","NFTs","JSON","stringify","result","console","log","display","flexDirection","gap","textAlign","padding","backgroundColor","language","defaultStyle","wrapLongLines","marginBottom","marginTop","marginLeft","checked","onChange","onClick","getNFTss","title","strong","obsidian","level","name","src","parse","metadata","image","includes","replace","alt","marginRight","map","nft","fontSize","owner_of","NativeBalance","QuickStart","images","setImages","resolveLink","offset","getAllTokenIds","NFT","preview","height","MenuItems","pathname","useLocation","theme","mode","fontWeight","justifyContent","defaultSelectedKeys","Item","to","vis","setVis","data","setData","columns","key","dataIndex","render","from_address","color","text","record","size","id","to_address","eth","value","account","getNFTTransfers","ops","token_address","token_id","getTokenIdMetadata","tokenIdMetadata","dataSource","config","year","autoFit","xField","yField","point","shape","label","fill","days","getNFTLowestPrice","NFTLowestPrice","paddingLeft","onReady","chartInstance","Header","Layout","Footer","content","fontFamily","header","position","zIndex","background","alignItems","borderBottom","headerRight","Logo","viewBox","xmlns","d","App","isWeb3Enabled","enableWeb3","isAuthenticated","isWeb3EnableLoading","useEffect","connectorId","window","localStorage","getItem","provider","overflow","exact","path","href","target","rel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","APP_ID","process","REACT_APP_MORALIS_APPLICATION_ID","SERVER_URL","REACT_APP_MORALIS_SERVER_URL","Application","Error","appId","serverUrl","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4rBAwBaA,GAxBK,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAEP,IAAIJ,KAAKC,aAAa,QAAS,CAC/CC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAGP,IAAIJ,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPG,SAAU,MACVF,sBAAuB,EACvBC,sBAAuB,IASK,SAACE,GAAgB,IAAXC,EAAU,uDAAN,EACtC,OAAID,EACI,GAAN,OAAUA,EAAIE,MAAM,EAAGD,GAAvB,cAA+BD,EAAIE,MAAMF,EAAIG,OAASF,IAEjD,K,gCCTMG,I,mCC8CAC,I,kBCjEA,MAA0B,mCCA1B,ICAA,ICAA,ICAA,IC2KAC,I,uBC3CAC,I,iDCzHPC,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,MACNC,EAAiBC,IAAjBD,aAEFE,EAAS,CACbC,KAAM,CACJC,UAAW,yCACXC,OAAQ,oBACRC,aAAc,UAEhBC,MAAM,CACJC,MAAM,SAERC,IAAI,CACFD,MAAM,WAYK,SAASE,EAAT,GAAkC,EAAhBC,aAAiB,IAL7BC,EAMXC,EAAYC,cAAZD,QACR,EAAmBE,qBAAnB,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,mBAAS,yFAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAP+C,4CAW/C,8BAAAC,EAAA,6DAGIC,EADCT,EACS,CAACU,MAAO,YAAaC,QAAS,6CAA8CC,MAAM,KACrFV,EACG,CAACQ,MAAO,MAAOC,QAAS,6CAA8CC,MAAM,KAE5E,CAACF,MAAO,UAAWC,QAAS,6CAA8CC,MAAM,KAP9F,SAUqBnB,EAAQoB,QAAQC,MAAMC,aAAaN,GAVxD,OAUQO,EAVR,OAYEnB,EAAMoB,KAAKC,UAAUF,EAAM,KAAM,IACjCjB,EAAUiB,EAAKG,QACfC,QAAQC,IAAIvB,GAdd,4CAX+C,sBAkD/C,OACE,sBAAKjC,MAAO,CAACyD,QAAQ,OAAQC,cAAc,SAAUC,IAAI,QAAzD,UACE,cAAC7C,EAAD,CAAOd,MAAO,CAAC4D,UAAU,UAAzB,6BACA,cAAC,IAAD,CACE5D,MAAoBiB,EAAOO,IAD7B,SAGE,sBAAKxB,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UACA,sBAAK3D,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,qBAAsBzC,aAAa,MAAOE,MAAM,UAA7F,UACA,cAAC,IAAD,CAAmBwC,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SACGxB,IAEH,cAAC,IAAD,CAAmBsB,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SApEM,0DAwEN,gCACA,sBAAKjE,MAAO,CAACkE,aAAa,OAAQC,UAAU,OAAOC,WAAW,QAA9D,UACA,cAACrD,EAAD,CACIsD,QAAUhC,EACViC,SAAU,kBAhClBhC,GAAQ,GACRF,GAAS,GACTI,GAAU,QACVE,EAAS,0FA2BL,iBAMA,cAAC3B,EAAD,CACIsD,QAAUlC,EACVmC,SAAU,kBA7ClBlC,GAAS,GACTE,GAAQ,GACRE,GAAU,QACVE,EAAS,gGAwCL,kBAME,cAAC3B,EAAD,CACEsD,QAAU9B,EACV+B,SAAU,kBArClB9B,GAAU,GACVF,GAAQ,GACRF,GAAS,QACTM,EAAS,8FAgCH,sBAOA,cAAC,IAAD,CAAQ6B,QAAS,kBAtFsB,0CAsFlBC,IAAYxE,MAAO,CAACoE,WAAW,SAApD,yBAIHrC,GACH,sBAAK/B,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UAEE,cAAC,IAAD,CACE3D,MAAOiB,EAAOC,KACduD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,8BAJT,SASE,qBAAK1E,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,kBAAmBzC,aAAa,MAAOE,MAAM,UAA1F,SACA,cAAC,IAAD,CAAmBwC,SAAS,OAAO/D,MAAO2E,IAAUV,eAAe,EAAnE,SACGlC,QAKL,8BAEE,cAAC,IAAD,CACE/B,MAAoBiB,EAAOK,MAC3BmD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,mCAJT,SAWGzC,GACD,qCACA,sBAAKjC,MAAO,CAAC4D,UAAW,UAAxB,UACA,cAAC9C,EAAD,CAAO8D,MAAO,EAAd,uBAGA,cAAC9D,EAAD,CAAO8D,MAAO,EAAd,SACG3C,EAAO,GAAG4C,OAEb,qBAAKC,KAxIMnD,EAwIWyB,KAAK2B,MAAM9C,EAAO,GAAG+C,UAAUC,MAvIxDtD,GAAQA,EAAIuD,SAAS,WACnBvD,EAAIwD,QAAQ,UAAW,iCADexD,GAuIwByD,IAAI,GAAGpF,MAAO,CAACuB,MAAM,OAAQF,aAAa,MAAQ6C,aAAa,OAAOE,WAAY,OAAQiB,YAAa,aARpK,OAWApD,QAXA,IAWAA,OAXA,EAWAA,EAAQqD,KAAI,SAACC,GAAD,OACJ,mBAAGvF,MAAO,CAACwF,SAAS,QAApB,SAA8B3F,EAAe0F,EAAIE,SAAU,qB,8BC5J9DC,I,mBCLP9E,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,MACNC,EAAiBC,IAAjBD,aAEFE,EAAS,CACbC,KAAM,CACJC,UAAW,yCACXC,OAAQ,oBACRC,aAAc,UAEhBC,MAAM,CACJC,MAAM,SAERC,IAAI,CACFD,MAAM,WAOK,SAASoE,EAAT,GAAsC,EAAhBjE,aAAiB,IAC5CE,EAAYC,cAAZD,QACR,EAAmBE,qBAAnB,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA4BF,qBAA5B,mBAAO8D,EAAP,KAAeC,EAAf,KACA,EAA0B/D,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,mBAAS,oGAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAGMoD,EAAc,SAACnE,GACnB,OAAKA,GAAQA,EAAIuD,SAAS,WACnBvD,EAAIwD,QAAQ,UAAW,iCADexD,GAXI,4CAenD,sCAAAgB,EAAA,6DAGIC,EADCT,EACS,CAACU,MAAO,YAAaC,QAAS,6CAA8CC,MAAO,EAAGgD,OAAQ,KACjG1D,EACG,CAACQ,MAAO,MAAOC,QAAS,6CAA8CC,MAAO,IAE7E,CAACF,MAAO,UAAWC,QAAS,6CAA8CC,MAAO,EAAGgD,OAAQ,MAP1G,SASqBnE,EAAQoB,QAAQC,MAAM+C,eAAepD,GAT1D,OASQO,EATR,OAWEnB,EAAMoB,KAAKC,UAAUF,EAAM,KAAM,IAXnC,cAakBA,EAAKG,QAbvB,IAaE,2BACI,QADK2C,EAAoB,eACzB,IAAIA,KAAKjB,WACPiB,EAAIjB,SAAW5B,KAAK2B,MAAMkB,EAAIjB,UAC9BiB,EAAIhB,MAAQa,EAAW,UAACG,EAAIjB,gBAAL,aAAC,EAAcC,QAhB9C,8BAoBEY,EAAU1C,EAAKG,QApBjB,4CAfmD,sBA6DnD,OACE,sBAAKtD,MAAO,CAACyD,QAAQ,OAAQC,cAAc,SAAUC,IAAI,QAAzD,UACE,cAAC,EAAD,CAAO3D,MAAO,CAAC4D,UAAU,UAAzB,+BACA,cAAC,IAAD,CACE5D,MAAoBiB,EAAOO,IAD7B,SAGE,sBAAKxB,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UACA,sBAAK3D,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,qBAAsBzC,aAAa,MAAOE,MAAM,UAA7F,UACA,cAAC,IAAD,CAAmBwC,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SACGxB,IAEH,cAAC,IAAD,CAAmBsB,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SA1EM,2DA8EN,gCACA,sBAAKjE,MAAO,CAACkE,aAAa,OAAQC,UAAU,OAAOC,WAAW,QAA9D,UACA,cAAC,EAAD,CACIC,QAAUhC,EACViC,SAAU,kBAhClBhC,GAAQ,GACRE,GAAU,GACVJ,GAAS,QACTM,EAAS,qGA2BL,iBAMA,cAAC,EAAD,CACI2B,QAAUlC,EACVmC,SAAU,kBA7ClBlC,GAAS,GACTE,GAAQ,GACRE,GAAU,QACVE,EAAS,0GAwCL,kBAME,cAAC,EAAD,CACE2B,QAAU9B,EACV+B,SAAU,kBArClB9B,GAAU,GACVF,GAAQ,GACRF,GAAS,QACTM,EAAS,wGAgCH,sBAOA,cAAC,IAAD,CAAQ6B,QAAS,kBAjG0B,0CAiGtBC,IAAYxE,MAAO,CAACoE,WAAW,SAApD,yBAIHrC,GACH,sBAAK/B,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UAEE,cAAC,IAAD,CACE3D,MAAOiB,EAAOC,KACduD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,8BAJT,SASE,qBAAK1E,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,kBAAmBzC,aAAa,MAAOE,MAAM,UAA1F,SACA,cAAC,IAAD,CAAmBwC,SAAS,OAAO/D,MAAO2E,IAAUV,eAAe,EAAnE,SACGlC,QAKL,8BAEE,cAAC,IAAD,CACE/B,MAAoBiB,EAAOK,MAC3BmD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,mCAJT,gBAQEkB,QARF,IAQEA,OARF,EAQEA,EAAQN,KAAI,SAACC,GAAD,OACJ,cAAC,IAAD,CACEW,SAAS,EACTpB,KAAQ,OAAHS,QAAG,IAAHA,OAAA,EAAAA,EAAKN,QAAS,QACnBG,IAAI,GACJpF,MAAO,CAAEmG,OAAQ,wBC7HtBC,MAhCf,WACE,IAAQC,EAAaC,cAAbD,SAER,OACE,eAAC,IAAD,CACEE,MAAM,QACNC,KAAK,aACLxG,MAAO,CACLyD,QAAS,OACT+B,SAAU,OACViB,WAAY,MACZlF,MAAO,OACPmF,eAAgB,UAElBC,oBAAqB,CAACN,GAVxB,UAYE,cAAC,IAAKO,KAAN,UACE,cAAC,IAAD,CAASC,GAAG,UAAZ,kCADa,WAGf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAASC,GAAG,UAAZ,kCADa,WAMf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAASC,GAAG,aAAZ,qCADa,iB,oBC7BN,MAA0B,gCCQjCjG,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,MACNC,EAAiBC,IAAjBD,aAEFE,EAAS,CACbC,KAAM,CACJC,UAAW,yCACXC,OAAQ,oBACRC,aAAc,UAEhBC,MAAM,CACJC,MAAM,SAERC,IAAI,CACFD,MAAM,WAOJuE,EAAc,SAACnE,GACnB,OAAKA,GAAQA,EAAIuD,SAAS,WACnBvD,EAAIwD,QAAQ,UAAW,iCADexD,GAIhC,SAASF,EAAT,GAAkC,EAAhBC,aAAiB,IACxCE,EAAYC,cAAZD,QACR,EAAmBE,qBAAnB,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAAsBF,qBAAtB,mBAAOgF,EAAP,KAAYC,EAAZ,KACA,EAA0BjF,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAwBR,qBAAxB,mBAAOkF,EAAP,KAAaC,EAAb,KACA,EAA4BnF,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,mBAAS,yFAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAIMwE,EAAU,CACd,CACEzC,MAAO,WACP0C,IAAK,eACLC,UAAW,eACXC,OAAQ,SAAAC,GAAY,OAClB,mCACwB,+CAAjBA,EACD,cAAC,IAAD,CAAKC,MAAO,UAAZ,gBAA4BD,GAG5B,cAAC,IAAD,CAAKC,MAAO,QAAZ,eAA0BD,OAWpC,CACE7C,MAAO,OACP0C,IAAK,OACLE,OAAQ,SAACG,EAAMC,GAAP,OACN,eAAC,IAAD,CAAOC,KAAK,SAAZ,UACE,qBAAK5C,IAAK2C,EAAOxC,MAAOjF,MAAO,CAACuB,MAAM,OAAQF,aAAa,UAC3D,qCAAQoG,EAAOE,WAIrB,CACElD,MAAO,aACP2C,UAAW,OACXD,IAAK,QAEP,CACA1C,MAAO,OACP0C,IAAK,OACLE,OAAQ,SAACG,EAAMC,GAAP,OACN5H,EAAe4H,EAAOH,aAAc,KAGtC,CACE7C,MAAO,KACP0C,IAAK,KACLE,OAAQ,SAACG,EAAMC,GAAP,OACN5H,EAAe4H,EAAOG,WAAY,KAGpC,CACEnD,MAAO,QACP0C,IAAK,QACLE,OAAQ,SAACG,EAAMC,GAAP,OACN,mCACA,sBAAKzH,MAAO,CAACyD,QAAQ,QAArB,UACA,qBAAKqB,IAAK+C,EAAK7H,MAAO,CAACuB,MAAM,OAAQ8D,YAAY,SAClD,+BAAOoC,EAAOK,MAAQ,eAtEkB,4CA+G/C,0CAAAnF,EAAA,6DAGIC,EADCT,EACS,CAACU,MAAO,YAAaC,QAAS,8CACjCT,EACG,CAACQ,MAAO,MAAOC,QAAS,8CAExB,CAACD,MAAO,UAAWC,QAAS,8CAP1C,SAUqBlB,EAAQoB,QAAQ+E,QAAQC,gBAAgBpF,GAV7D,OAUQO,EAVR,OAYEnB,EAAMoB,KAAKC,UAAUF,EAAM,KAAM,IAZnC,cAckBA,EAAKG,QAdvB,gEAcW2C,EAdX,QAeUgC,EAAM,CAAEnF,QAASmD,EAAIiC,cAAeC,SAAUlC,EAAIkC,SAAUtF,MAAO,OAf7E,UAgBkCjB,EAAQoB,QAAQC,MAAMmF,mBAAmBH,GAhB3E,QAgBUI,EAhBV,OAiBI9E,QAAQC,IAAI6E,GACZ,OAAIA,QAAJ,IAAIA,KAAiBrD,WACnBqD,EAAgBrD,SAAW5B,KAAK2B,MAAMsD,EAAgBrD,UACtDiB,EAAIhB,MAAQa,EAAW,UAACuC,EAAgBrD,gBAAjB,aAAC,EAA0BC,OAClDgB,EAAIpB,KAAOwD,EAAgBxD,KAC3BoB,EAAI0B,GAAKU,EAAgBF,UAtB/B,+IA0BA5E,QAAQC,IAAIL,GACZ8D,EAAQ9D,EAAKG,QA3Bb,iEA/G+C,sBAoK/C,OACE,sBAAKtD,MAAO,CAACyD,QAAQ,OAAQC,cAAc,SAAUC,IAAI,QAAzD,UACE,cAAC,EAAD,CAAO3D,MAAO,CAAC4D,UAAU,UAAzB,gCACA,cAAC,IAAD,CACE5D,MAAoBiB,EAAOO,IAD7B,SAGE,sBAAKxB,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UACA,sBAAK3D,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,qBAAsBzC,aAAa,MAAOE,MAAM,UAA7F,UACA,cAAC,IAAD,CAAmBwC,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SACGxB,IAEH,cAAC,IAAD,CAAmBsB,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SAtLM,+DA0LN,gCACA,sBAAKjE,MAAO,CAACkE,aAAa,OAAQC,UAAU,OAAOC,WAAW,QAA9D,UACA,cAAC,EAAD,CACIC,QAAUhC,EACViC,SAAU,kBAhClBhC,GAAQ,GACRF,GAAS,GACTI,GAAU,QACVE,EAAS,0FA2BL,iBAMA,cAAC,EAAD,CACI2B,QAAUlC,EACVmC,SAAU,kBA7ClBlC,GAAS,GACTE,GAAQ,GACRE,GAAU,QACVE,EAAS,gGAwCL,kBAME,cAAC,EAAD,CACE2B,QAAU9B,EACV+B,SAAU,kBArClB9B,GAAU,GACVF,GAAQ,GACRF,GAAS,QACTM,EAAS,8FAgCH,sBAOA,cAAC,IAAD,CAAQ6B,QAAS,kBAxMsB,0CAwMlBC,IAAYxE,MAAO,CAACoE,WAAW,SAApD,yBAIH0C,GACD,cAAC,IAAD,CAAOI,QAASA,EAASoB,WAAYtB,IAEpCjF,GACH,sBAAK/B,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UAEE,cAAC,IAAD,CACE3D,MAAOiB,EAAOC,KACduD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,8BAJT,SASE,qBAAK1E,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,kBAAmBzC,aAAa,MAAOE,MAAM,UAA1F,SACA,cAAC,IAAD,CAAmBwC,SAAS,OAAO/D,MAAO2E,IAAUV,eAAe,EAAnE,SACGlC,QAKL,8BAEE,cAAC,IAAD,CACE/B,MAAoBiB,EAAOK,MAC3BmD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,mCAJT,SAQE,cAAC,IAAD,CAAQH,QAAS,kBAAIwC,GAAQD,IAA7B,mC,cCrQFlG,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,MACNC,EAAiBC,IAAjBD,aAEFE,GAAS,CACbC,KAAM,CACJC,UAAW,yCACXC,OAAQ,oBACRC,aAAc,UAEhBC,MAAM,CACJC,MAAM,SAERC,IAAI,CACFD,MAAM,WAYK,SAASE,GAAT,GAAkC,EAAhBC,aAAiB,IACxCE,EAAYC,cAAZD,QACR,EAAmBE,qBAAnB,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAAsBF,qBAAtB,mBAAOgF,EAAP,KAAYC,EAAZ,KACA,EAA0BjF,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAEA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,mBAAS,yFAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAgBM6F,EAAS,CACbvB,KAbW,CACX,CAAEwB,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,KACvB,CAAEU,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,KACvB,CAAEU,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,GACvB,CAAEU,KAAM,OAAQV,MAAO,KAKvBvG,MAAO,IACP4E,OAAQ,IACRsC,SAAS,EACTC,OAAQ,OACRC,OAAQ,QACRC,MAAO,CACLlB,KAAM,EACNmB,MAAO,WAETC,MAAO,CACL9I,MAAO,CACL+I,KAAM,UArCmC,4CA+C/C,8BAAApG,EAAA,6DAGIC,EADCT,EACS,CAACU,MAAO,YAAaC,QAAS,8CACjCT,EACG,CAAES,QAAS,6CAA8CkG,KAAM,KAE/D,CAACnG,MAAO,UAAWC,QAAS,8CAP1C,SAW+BlB,EAAQoB,QAAQC,MAAMgG,kBAAkBrG,GAXvE,OAWQsG,EAXR,OAYE3F,QAAQC,IAAI0F,GACZlH,EAAMoB,KAAKC,UAAU6F,EAAgB,KAAM,IAb7C,4CA/C+C,sBAwF/C,OACE,sBAAKlJ,MAAO,CAACyD,QAAQ,OAAQC,cAAc,SAAUC,IAAI,QAAzD,UACE,cAAC,EAAD,CAAO3D,MAAO,CAAC4D,UAAU,UAAzB,kCACA,cAAC,IAAD,CACE5D,MAAoBiB,GAAOO,IAD7B,SAGE,sBAAKxB,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UACA,sBAAK3D,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,qBAAsBzC,aAAa,MAAOE,MAAM,UAA7F,UACA,cAAC,IAAD,CAAmBwC,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SACGxB,IAEH,cAAC,IAAD,CAAmBsB,SAAS,aAAa/D,MAAOgE,IAAcC,eAAe,EAA7E,SA1GM,+DA8GN,gCACA,sBAAKjE,MAAO,CAACkE,aAAa,OAAQC,UAAU,OAAOC,WAAW,QAA9D,UACA,cAAC,EAAD,CACIC,QAAUhC,EACViC,SAAU,kBAhClBhC,GAAQ,GACRF,GAAS,GACTI,GAAU,QACVE,EAAS,0FA2BL,iBAMA,cAAC,EAAD,CACI2B,QAAUlC,EACVmC,SAAU,kBA7ClBlC,GAAS,GACTE,GAAQ,GACRE,GAAU,QACVE,EAAS,gGAwCL,kBAME,cAAC,EAAD,CACE2B,QAAU9B,EACV+B,SAAU,kBArClB9B,GAAU,GACVF,GAAQ,GACRF,GAAS,QACTM,EAAS,8FAgCH,sBAOA,cAAC,IAAD,CAAQ6B,QAAS,kBA5HsB,0CA4HlBC,IAAYxE,MAAO,CAACoE,WAAW,SAApD,yBAIJ,cAAC,IAAD,CAAMpE,MAAO,CAACmJ,YAAY,SAA1B,SACA,cAAC,IAAD,2BAAUZ,GAAV,IAAkBa,QAAS,SAACC,GAAD,OAA4BA,QAEtDtH,GACH,sBAAK/B,MAAO,CAAEyD,QAAS,OAAQE,IAAK,QAApC,UAEE,cAAC,IAAD,CACE3D,MAAOiB,GAAOC,KACduD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,8BAJT,SASE,qBAAK1E,MAAO,CAAC6D,QAAQ,OAAQC,gBAAgB,kBAAmBzC,aAAa,MAAOE,MAAM,UAA1F,SACA,cAAC,IAAD,CAAmBwC,SAAS,OAAO/D,MAAO2E,IAAUV,eAAe,EAAnE,SACGlC,QAKL,8BAEE,cAAC,IAAD,CACE/B,MAAoBiB,GAAOK,MAC3BmD,MACE,qDACK,cAAC,EAAD,CAAMC,QAAM,EAAZ,mCAJT,SAQE,cAAC,IAAD,CAAQH,QAAS,kBAAIwC,GAAQD,IAA7B,mCCjMK,WAA0B,mCCgBjCwC,GAAmBC,IAAnBD,OAAQE,GAAWD,IAAXC,OAEVvI,GAAS,CACbwI,QAAS,CACPhG,QAAS,OACTiD,eAAgB,SAChBgD,WAAY,qBACZnC,MAAO,UACPpD,UAAW,QACXN,QAAS,QAEX8F,OAAQ,CACNC,SAAU,QACVC,OAAQ,EACRtI,MAAO,OACPuI,WAAY,OACZrG,QAAS,OACTiD,eAAgB,gBAChBqD,WAAY,SACZL,WAAY,qBACZM,aAAc,gCACdnG,QAAS,SACT1C,UAAW,qCAEb8I,YAAa,CACXxG,QAAS,OACTE,IAAK,OACLoG,WAAY,SACZvE,SAAU,OACViB,WAAY,QAmFHyD,GAAO,kBAClB,qBAAKlK,MAAO,CAAEyD,QAAS,QAAvB,SACE,sBAAKlC,MAAM,KAAK4E,OAAO,KAAKgE,QAAQ,YAAYpB,KAAK,OAAOqB,MAAM,6BAAlE,UACE,sBACEC,EAAE,gHACFtB,KAAK,UAEP,sBACEsB,EAAE,ynDACFtB,KAAK,YAEP,sBACEsB,EAAE,+SACFtB,KAAK,kBAMEuB,GAnGH,SAAC,GAAsB,IAApB5I,EAAmB,EAAnBA,aACb,EAA4EG,cAApE0I,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,gBAAiBC,EAApD,EAAoDA,oBAQpD,OANAC,qBAAU,WACR,IAAMC,EAAcC,OAAOC,aAAaC,QAAQ,gBAC5CN,GAAoBF,GAAkBG,GAAqBF,EAAW,CAAEQ,SAAUJ,MAErF,CAACH,EAAiBF,IAGnB,eAAC,IAAD,CAAQvK,MAAO,CAAEmG,OAAQ,QAAS8E,SAAU,QAA5C,UACE,eAAC,IAAD,WACE,eAAC3B,GAAD,CAAQtJ,MAAOiB,GAAO0I,OAAtB,UACE,cAAC,GAAD,IAEA,cAAC,EAAD,IACA,qBAAK3J,MAAOiB,GAAOgJ,YAAnB,SAGE,qBAAKnF,IAAKS,GAAKH,IAAI,GAAGpF,MAAO,CAACmG,OAAO,eAIzC,qBAAKnG,MAAOiB,GAAOwI,QAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAlB,SACE,cAACxF,EAAD,CAAYjE,aAAcA,MAE5B,cAAC,IAAD,CAAOyJ,KAAK,UAAZ,SACE,cAAC1J,EAAD,MAEF,cAAC,IAAD,CAAO0J,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUtE,GAAG,cAEf,cAAC,IAAD,CAAOsE,KAAK,wBAAZ,SACE,cAAC,IAAD,CAAUtE,GAAG,cAEf,cAAC,IAAD,CAAOsE,KAAK,oBAAZ,SACE,8FAKR,eAAC3B,GAAD,CAAQxJ,MAAO,CAAE4D,UAAW,UAA5B,UACE,eAAC,IAAD,CAAM5D,MAAO,CAAEyD,QAAS,SAAxB,0CACsB,IACpB,mBAAG2H,KAAK,gEAAgEC,OAAO,SAASC,IAAI,sBAA5F,yBAFF,uCAQA,eAAC,IAAD,CAAMtL,MAAO,CAAEyD,QAAS,SAAxB,8DAC0C,GACxC,mBAAG4H,OAAO,SAASC,IAAI,sBAAsBF,KAAK,oEAAlD,8BAKF,eAAC,IAAD,CAAMpL,MAAO,CAAEyD,QAAS,SAAxB,yCACqB,IACnB,mBACE4H,OAAO,SACPC,IAAI,sBACJF,KAAK,mGAHP,+BCvGJG,I,QAAcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,4DAsCN,SAASC,GAAgBC,EAAOtD,GAC9BuD,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjJ,QAAQC,IACN,+GAKE+E,GAAUA,EAAOkE,UACnBlE,EAAOkE,SAASP,KAMlB3I,QAAQC,IAAI,sCAGR+E,GAAUA,EAAOmE,WACnBnE,EAAOmE,UAAUR,WAO5BS,OAAM,SAACC,GACNrJ,QAAQqJ,MAAM,4CAA6CA,MCtFjE,IAAMC,GAASC,mIAAYC,iCACrBC,GAAaF,mIAAYG,6BAEzBC,GAAc,WAClB,IAAMxL,KAAemL,KAAUG,IAE/B,IAAKH,KAAWG,GACd,MAAM,IAAIG,MACR,kFAEJ,OAAIzL,EAEA,cAAC,IAAD,CAAiB0L,MAAOP,GAAQQ,UAAWL,GAA3C,SACE,cAAC,GAAD,CAAKtL,cAAY,MAKnB,qBAAK1B,MAAO,CAAEyD,QAAS,OAAQiD,eAAgB,UAA/C,SACE,cAACf,EAAD,OAMR2H,IAASjG,OACP,eAAC,aAAD,WACE,cAAC,GAAD,IADF,OAGAkG,SAASC,eAAe,SDjBnB,SAAkBjF,GACvB,GAA6C,kBAAmBuD,UAAW,CAGzE,GADkB,IAAI2B,IAAIX,GAAwBjC,OAAOY,SAASL,MACpDsC,SAAW7C,OAAOY,SAASiC,OAIvC,OAGF7C,OAAO8C,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAMiB,GAAN,sBAEPvB,KAgEV,SAAiCM,EAAOtD,GAEtCqF,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAC6B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,MAAK,SAACC,GAClCA,EAAakC,aAAanC,MAAK,WAC7BpB,OAAOY,SAAS4C,eAKpBzC,GAAgBC,EAAOtD,MAG1BoE,OAAM,WACLpJ,QAAQC,IACN,oEAvFA8K,CAAwBzC,EAAOtD,GAI/BuD,UAAUC,cAAcoC,MAAMlC,MAAK,WACjC1I,QAAQC,IACN,+GAMJoI,GAAgBC,EAAOtD,OCL/BgG,K","file":"static/js/main.171c4863.chunk.js","sourcesContent":["export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6,\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4,\n});\n\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\n/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */\nexport const getEllipsisTxt = (str, n = 6) => {\n  if (str) {\n    return `${str.slice(0, n)}...${str.slice(str.length - n)}`;\n  }\n  return \"\";\n};\n\nexport const tokenValue = (value, decimals) => (decimals ? value / Math.pow(10, decimals) : value);\n\n/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;\n","import { Skeleton } from \"antd\";\nimport Blockies from \"react-blockies\";\nimport { useMoralis } from \"react-moralis\";\n\n/**\n * Shows a blockie image for the provided wallet address\n * @param {*} props\n * @returns <Blockies> JSX Elemenet\n */\n\nfunction Blockie(props) {\n  const { account, isAuthenticated } = useMoralis();\n  if (!props.address && (!account || !isAuthenticated)) return <Skeleton.Avatar active size={40} />;\n\n  return (\n    <Blockies seed={props.currentWallet ? account.toLowerCase() : props.address.toLowerCase()} className=\"identicon\" {...props} />\n  );\n}\n\nexport default Blockie;\n","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\nimport Blockie from \"../Blockie\";\nimport \"./identicon.css\";\nimport { useMoralis } from \"react-moralis\";\nimport { Skeleton } from \"antd\";\n\nconst styles = {\n  address: {\n    height: \"36px\",\n    display: \"flex\",\n    gap: \"5px\",\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    borderRadius: \"9px\",\n    alignItems: \"center\",\n  },\n};\n\nfunction Address(props) {\n  const { account, isAuthenticated } = useMoralis();\n  const [address, setAddress] = useState();\n  const [isClicked, setIsClicked] = useState(false);\n\n  useEffect(() => {\n    setAddress(props?.address || (isAuthenticated && account));\n  }, [account, isAuthenticated, props]);\n\n  if (!address) return <Skeleton paragraph={{ rows: 1, width: \"100%\" }} title={false} active />;\n\n  const Copy = () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"26\"\n      height=\"26\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"2\"\n      stroke=\"#1780FF\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      style={{ cursor: \"pointer\" }}\n      onClick={() => {\n        navigator.clipboard.writeText(address);\n        setIsClicked(true);\n      }}\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15 3v4a1 1 0 0 0 1 1h4\" />\n      <path d=\"M18 17h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h4l5 5v7a2 2 0 0 1 -2 2z\" />\n      <path d=\"M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2\" />\n      <title id=\"copy-address\">Copy Address</title>\n    </svg>\n  );\n\n  return (\n    <div style={{ ...styles.address, ...props.style }}>\n      {props.avatar === \"left\" && <Blockie address={address} size={7} />}\n      <p>{props.size ? getEllipsisTxt(address, props.size) : address}</p>\n      {props.avatar === \"right\" && <Blockie address={address} size={7} />}\n      {props.copyable && (isClicked ? <Check /> : <Copy />)}\n    </div>\n  );\n}\n\nexport default Address;\n\nconst Check = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth=\"3\"\n    stroke=\"#21BF96\"\n    fill=\"none\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M5 12l5 5l10 -10\" />\n    <title id=\"copied-address\">Copied!</title>\n  </svg>\n);\n","export default __webpack_public_path__ + \"static/media/Coin98.1e4e4073.png\";","export default __webpack_public_path__ + \"static/media/wallet-connect.304e3277.svg\";","export default __webpack_public_path__ + \"static/media/MathWallet.19212234.svg\";","export default __webpack_public_path__ + \"static/media/TokenPocket.0ba48742.svg\";","export default __webpack_public_path__ + \"static/media/SafePal.e7068bbc.svg\";","import { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport Blockie from \"../Blockie\";\nimport { Button, Card, Modal } from \"antd\";\nimport { useState } from \"react\";\nimport Address from \"../Address/Address\";\nimport { SelectOutlined } from \"@ant-design/icons\";\nimport { getExplorer } from \"helpers/networks\";\nimport Text from \"antd/lib/typography/Text\";\nimport { connectors } from \"./config\";\nconst styles = {\n  account: {\n    height: \"42px\",\n    padding: \"0 15px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"fit-content\",\n    borderRadius: \"12px\",\n    backgroundColor: \"rgb(244, 244, 244)\",\n    cursor: \"pointer\",\n  },\n  text: {\n    color: \"#21BF96\",\n  },\n  connector: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"auto\",\n    justifyContent: \"center\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding: \"20px 5px\",\n    cursor: \"pointer\",\n  },\n  icon: {\n    alignSelf: \"center\",\n    fill: \"rgb(40, 13, 95)\",\n    flexShrink: \"0\",\n    marginBottom: \"8px\",\n    height: \"30px\",\n  },\n};\n\nfunction Account() {\n  const { authenticate, isAuthenticated, account, chainId, logout } = useMoralis();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isAuthModalVisible, setIsAuthModalVisible] = useState(false);\n  \n  if (!isAuthenticated || !account) {\n    return (\n      <>\n        <div\n          onClick={() => setIsAuthModalVisible(true)}\n        >\n          <p style={styles.text}>Authenticate</p>\n        </div>\n        <Modal\n          visible={isAuthModalVisible}\n          footer={null}\n          onCancel={() => setIsAuthModalVisible(false)}\n          bodyStyle={{\n            padding: \"15px\",\n            fontSize: \"17px\",\n            fontWeight: \"500\",\n          }}\n          style={{ fontSize: \"16px\", fontWeight: \"500\" }}\n          width=\"340px\"\n        >\n          <div style={{ padding: \"10px\", display: \"flex\", justifyContent: \"center\", fontWeight: \"700\", fontSize: \"20px\" }}>\n            Connect Wallet\n          </div>\n          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\" }}>\n            {connectors.map(({ title, icon, connectorId }, key) => (\n              <div\n                style={styles.connector}\n                key={key}\n                onClick={async () => {\n                  try {\n                    await authenticate({ provider: connectorId });\n                    window.localStorage.setItem(\"connectorId\", connectorId);\n                    setIsAuthModalVisible(false);\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }}\n              >\n                <img src={icon} alt={title} style={styles.icon} />\n                <Text style={{ fontSize: \"14px\" }}>{title}</Text>\n              </div>\n            ))}\n          </div>\n        </Modal>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {/* <button\n        onClick={async () => {\n          try {\n            console.log(\"change\")\n            await web3._provider.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{ chainId: \"0x38\" }],\n            });\n            console.log(\"changed\")\n          } catch (e) {\n            console.error(e);\n          }\n        }}\n      >\n        Hi\n      </button> */}\n      <div style={styles.account} onClick={() => setIsModalVisible(true)}>\n        <p style={{ marginRight: \"5px\", ...styles.text }}>{getEllipsisTxt(account, 6)}</p>\n        <Blockie currentWallet scale={3} />\n      </div>\n      <Modal\n        visible={isModalVisible}\n        footer={null}\n        onCancel={() => setIsModalVisible(false)}\n        bodyStyle={{\n          padding: \"15px\",\n          fontSize: \"17px\",\n          fontWeight: \"500\",\n        }}\n        style={{ fontSize: \"16px\", fontWeight: \"500\" }}\n        width=\"400px\"\n      >\n        Account\n        <Card\n          style={{\n            marginTop: \"10px\",\n            borderRadius: \"1rem\",\n          }}\n          bodyStyle={{ padding: \"15px\" }}\n        >\n          <Address avatar=\"left\" size={6} copyable style={{ fontSize: \"20px\" }} />\n          <div style={{ marginTop: \"10px\", padding: \"0 10px\" }}>\n            <a href={`${getExplorer(chainId)}/address/${account}`} target=\"_blank\" rel=\"noreferrer\">\n              <SelectOutlined style={{ marginRight: \"5px\" }} />\n              View on Explorer\n            </a>\n          </div>\n        </Card>\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          style={{\n            width: \"100%\",\n            marginTop: \"10px\",\n            borderRadius: \"0.5rem\",\n            fontSize: \"16px\",\n            fontWeight: \"500\",\n          }}\n          onClick={async () => {\n            await logout();\n            window.localStorage.removeItem(\"connectorId\");\n            setIsModalVisible(false);\n          }}\n        >\n          Disconnect Wallet\n        </Button>\n      </Modal>\n    </>\n  );\n}\n\nexport default Account;\n","import { useEffect, useState } from \"react\";\nimport { Menu, Dropdown, Button } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport { AvaxLogo, PolygonLogo, BSCLogo, ETHLogo } from \"./Logos\";\nimport { useChain, useMoralis } from \"react-moralis\";\n\nconst styles = {\n  item: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: \"42px\",\n    fontWeight: \"500\",\n    fontFamily: \"Roboto, sans-serif\",\n    fontSize: \"14px\",\n    padding: \"0 10px\",\n  },\n  button: {\n    border: \"2px solid rgb(231, 234, 243)\",\n    borderRadius: \"12px\",\n  },\n};\n\nconst menuItems = [\n  {\n    key: \"0x1\",\n    value: \"Ethereum\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x539\",\n    value: \"Local Chain\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x3\",\n    value: \"Ropsten Testnet\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x4\",\n    value: \"Rinkeby Testnet\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x2a\",\n    value: \"Kovan Testnet\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x5\",\n    value: \"Goerli Testnet\",\n    icon: <ETHLogo />,\n  },\n  {\n    key: \"0x38\",\n    value: \"Binance\",\n    icon: <BSCLogo />,\n  },\n  {\n    key: \"0x61\",\n    value: \"Smart Chain Testnet\",\n    icon: <BSCLogo />,\n  },\n  {\n    key: \"0x89\",\n    value: \"Polygon\",\n    icon: <PolygonLogo />,\n  },\n  {\n    key: \"0x13881\",\n    value: \"Mumbai\",\n    icon: <PolygonLogo />,\n  },\n  {\n    key: \"0xa86a\",\n    value: \"Avalanche\",\n    icon: <AvaxLogo />,\n  },\n  {\n    key: \"0xa869\",\n    value: \"Avalanche Testnet\",\n    icon: <AvaxLogo />,\n  },\n];\n\nfunction Chains() {\n  const { switchNetwork, chainId, chain } = useChain();\n  const { isAuthenticated } = useMoralis();\n  const [selected, setSelected] = useState({});\n\n  console.log(\"chain\", chain);\n\n  useEffect(() => {\n    if (!chainId) return null;\n    const newSelected = menuItems.find((item) => item.key === chainId);\n    setSelected(newSelected);\n    console.log(\"current chainId: \", chainId);\n  }, [chainId]);\n\n  const handleMenuClick = (e) => {\n    console.log(\"switch to: \", e.key);\n    switchNetwork(e.key);\n  };\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon} style={styles.item}>\n          <span style={{ marginLeft: \"5px\" }}>{item.value}</span>\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  if (!chainId || !isAuthenticated) return null;\n\n  return (\n    <div>\n      <Dropdown overlay={menu} trigger={[\"click\"]}>\n        <Button key={selected?.key} icon={selected?.icon} style={{ ...styles.button, ...styles.item }}>\n          <span style={{ marginLeft: \"5px\" }}>{selected?.value}</span>\n          <DownOutlined />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default Chains;\n","import { Card, Typography, Button, Image, Tag } from \"antd\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { obsidian, defaultStyle } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\n\nconst { Text, Title } = Typography;\nconst { CheckableTag } = Tag;\n\nconst styles = {\n  card: {\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n    border: \"1px solid #e7eaf3\",\n    borderRadius: \"0.5rem\",\n  },\n  small:{\n    width:\"300px\"\n  },\n  top:{\n    width:\"1360px\"\n  }\n\n}\n\nconst avax2 = 'await Moralis.Web3API.token.getNFTOwners(options);'\n\nconst resolveLink = (url) => {\n  if (!url || !url.includes(\"ipfs://\")) return url;\n  return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n};\n\nexport default function Wallet({ isServerInfo }) {\n  const { Moralis } = useMoralis();\n  const [hi, setHi] =useState();\n  const [owners, setOwners] = useState();\n  const [avaxC, setAvaxC] = useState(false);\n  const [ethC, setEthC] = useState(true);\n  const [maticC, setMaticC] = useState(false);\n  const [avax1, setAvax1] = useState('const options = {chain: \"eth\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\"}');\n\n\n\n  async function getNFTss(){\n    let options;\n    if(avaxC){\n      options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\", limit:500};\n    }else if(ethC){\n      options = {chain: \"eth\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\", limit:500};\n    }else{\n      options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\", limit:500};\n    }\n\n    const NFTs = await Moralis.Web3API.token.getNFTOwners(options);\n\n    setHi(JSON.stringify(NFTs, null, 2));\n    setOwners(NFTs.result);\n    console.log(owners);\n  };\n\n\n  function checkAvax(){\n    setAvaxC(true);\n    setEthC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\"}');\n  }\n\n  function checkEth(){\n    setEthC(true);\n    setAvaxC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"eth\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\"}');\n  }\n\n  function checkMatic(){\n    setMaticC(true);\n    setEthC(false);\n    setAvaxC(false);\n    setAvax1('const options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\"}');\n  }\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", gap:\"20px\"}} >\n      <Title style={{textAlign:\"center\"}}> getNFTOwners()</Title>\n      <Card\n        style={styles.card, styles.top}\n      >\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n        <div style={{padding:\"10px\", backgroundColor:\"rgb(240, 240, 240)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax1}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax2}\n        </SyntaxHighlighter>\n        </div>\n        <div>\n        <div style={{marginBottom:\"20px\", marginTop:\"20px\",marginLeft:\"70px\"}}>\n        <CheckableTag\n            checked= {ethC}\n            onChange={() => checkEth()}\n          >\n            ETH\n          </CheckableTag>\n        <CheckableTag\n            checked= {avaxC}\n            onChange={() => checkAvax()}\n          >\n            AVAX\n          </CheckableTag>\n          <CheckableTag\n            checked= {maticC}\n            onChange={() => checkMatic()}\n          >\n            MATIC\n          </CheckableTag>\n          </div>\n          <Button onClick={()=>getNFTss()} style={{marginLeft:\"120px\"}}>Run</Button>\n          </div>\n        </div>\n      </Card>\n      {hi &&\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\n      \n      <Card\n        style={styles.card}\n        title={\n          <>\n            📝 <Text strong>JSON Response</Text>\n          </>\n        }\n      >\n        \n        <div style={{padding:\"10px\", backgroundColor:\"rgb(40, 43, 46)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"json\" style={obsidian} wrapLongLines={true}>\n          {hi}\n        </SyntaxHighlighter>\n        </div>\n        \n      </Card>\n      <div>\n       \n        <Card\n          style={styles.card, styles.small}\n          title={\n            <>\n              🎨 <Text strong> Processed Results</Text>\n            </>}\n        >\n\n          \n\n\n          {owners &&\n          <>\n          <div style={{textAlign: \"center\" }}>\n          <Title level={3}>\n            Owners Of\n          </Title> \n          <Title level={4}>\n            {owners[0].name}\n          </Title> \n          <img src={resolveLink(JSON.parse(owners[0].metadata).image)} alt=\"\" style={{width:\"50px\", borderRadius:\"50%\",  marginBottom:\"20px\",marginLeft: \"auto\", marginRight: \"auto\"}}></img>\n          </div>\n          {\n          owners?.map((nft) => (\n                  <p style={{fontSize:\"20px\"}}>{getEllipsisTxt(nft.owner_of, 6)}</p>\n            ))\n          }\n          </>\n          }\n        </Card>\n      </div>\n    </div>\n}\n    </div>\n  );\n}\n","import { useMoralis, useNativeBalance } from \"react-moralis\";\n\nfunction NativeBalance(props) {\n  const { data: balance } = useNativeBalance(props);\n  const { account, isAuthenticated } = useMoralis();\n\n  if (!account || !isAuthenticated) return null;\n\n  return <div style={{ textAlign: \"center\", whiteSpace: \"nowrap\" }}>{balance.formatted}</div>;\n}\n\nexport default NativeBalance;\n","import { Card, Typography, Button, Image, Tag } from \"antd\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { obsidian, defaultStyle } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\n\nconst { Text, Title } = Typography;\nconst { CheckableTag } = Tag;\n\nconst styles = {\n  card: {\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n    border: \"1px solid #e7eaf3\",\n    borderRadius: \"0.5rem\",\n  },\n  small:{\n    width:\"300px\"\n  },\n  top:{\n    width:\"1360px\"\n  }\n\n}\n\nconst avax2 = 'await Moralis.Web3API.token.getAllTokenIds(options)'\n\nexport default function QuickStart({ isServerInfo }) {\n  const { Moralis } = useMoralis();\n  const [hi, setHi] =useState();\n  const [images, setImages] = useState();\n  const [avaxC, setAvaxC] = useState(false);\n  const [ethC, setEthC] = useState(true);\n  const [maticC, setMaticC] = useState(false);\n  const [avax1, setAvax1] = useState('const options = {chain: \"eth\", address: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", limit: 10}');\n\n\n  const resolveLink = (url) => {\n    if (!url || !url.includes(\"ipfs://\")) return url;\n    return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n  };\n\n  async function getNFTss(){\n    let options;\n    if(avaxC){\n      options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\", limit: 2, offset: 700};\n    }else if(ethC){ \n      options = {chain: \"eth\", address: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", limit: 10};\n    }else{\n      options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\", limit: 4, offset: 7570};\n    }\n    const NFTs = await Moralis.Web3API.token.getAllTokenIds(options);\n\n    setHi(JSON.stringify(NFTs, null, 2));\n    \n    for (let NFT of NFTs.result) {\n        if (NFT?.metadata) {\n          NFT.metadata = JSON.parse(NFT.metadata);\n          NFT.image = resolveLink(NFT.metadata?.image);\n        }\n    }\n    \n    setImages(NFTs.result);\n\n  };\n\n\n  function checkAvax(){\n    setAvaxC(true);\n    setEthC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\", limit: 2}');\n  }\n\n  function checkEth(){\n    setEthC(true);\n    setMaticC(false);\n    setAvaxC(false);\n    setAvax1('const options = {chain: \"eth\", address: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", limit: 10}');\n  }\n\n  function checkMatic(){\n    setMaticC(true);\n    setEthC(false);\n    setAvaxC(false);\n    setAvax1('const options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\", limit: 4}');\n  }\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", gap:\"20px\"}} >\n      <Title style={{textAlign:\"center\"}}> getAllTokenIds()</Title>\n      <Card\n        style={styles.card, styles.top}\n      >\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n        <div style={{padding:\"10px\", backgroundColor:\"rgb(240, 240, 240)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax1}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax2}\n        </SyntaxHighlighter>\n        </div>\n        <div>\n        <div style={{marginBottom:\"20px\", marginTop:\"20px\",marginLeft:\"70px\"}}>\n        <CheckableTag\n            checked= {ethC}\n            onChange={() => checkEth()}\n          >\n            ETH\n          </CheckableTag>\n        <CheckableTag\n            checked= {avaxC}\n            onChange={() => checkAvax()}\n          >\n            AVAX\n          </CheckableTag>\n          <CheckableTag\n            checked= {maticC}\n            onChange={() => checkMatic()}\n          >\n            MATIC\n          </CheckableTag>\n          </div>\n          <Button onClick={()=>getNFTss()} style={{marginLeft:\"120px\"}}>Run</Button>\n          </div>\n        </div>\n      </Card>\n      {hi &&\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\n      \n      <Card\n        style={styles.card}\n        title={\n          <>\n            📝 <Text strong>JSON Response</Text>\n          </>\n        }\n      >\n        \n        <div style={{padding:\"10px\", backgroundColor:\"rgb(40, 43, 46)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"json\" style={obsidian} wrapLongLines={true}>\n          {hi}\n        </SyntaxHighlighter>\n        </div>\n        \n      </Card>\n      <div>\n       \n        <Card\n          style={styles.card, styles.small}\n          title={\n            <>\n              🎨 <Text strong> Processed Results</Text>\n            </>}\n        >\n          {\n          images?.map((nft) => (\n                  <Image\n                    preview={false}\n                    src={nft?.image || \"error\"}\n                    alt=\"\"\n                    style={{ height: \"240px\" }}\n                  />\n            ))\n          }\n        </Card>\n      </div>\n    </div>\n}\n    </div>\n  );\n}\n","import { useLocation } from \"react-router\";\nimport { Menu } from \"antd\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction MenuItems() {\n  const { pathname } = useLocation();\n\n  return (\n    <Menu\n      theme=\"light\"\n      mode=\"horizontal\"\n      style={{\n        display: \"flex\",\n        fontSize: \"17px\",\n        fontWeight: \"500\",\n        width: \"100%\",\n        justifyContent: \"center\",\n      }}\n      defaultSelectedKeys={[pathname]}\n    >\n      <Menu.Item key=\"/tokens\">\n        <NavLink to=\"/tokens\">🚀 Tokens</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"/owners\">\n        <NavLink to=\"/owners\">👛 Owners</NavLink>\n      </Menu.Item>\n{/*       <Menu.Item key=\"price\">\n        <NavLink to=\"/price\">💰Price</NavLink>\n      </Menu.Item> */}\n      <Menu.Item key=\"transfers\">\n        <NavLink to=\"/transfers\">➡️ Transfers</NavLink>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default MenuItems;\n","export default __webpack_public_path__ + \"static/media/eth.9b3e73a9.png\";","import { Card, Typography, Button, Image, Table, Tag, Space } from \"antd\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { obsidian, defaultStyle } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport eth  from \"eth.png\"\n\nconst { Text, Title } = Typography;\nconst { CheckableTag } = Tag;\n\nconst styles = {\n  card: {\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n    border: \"1px solid #e7eaf3\",\n    borderRadius: \"0.5rem\",\n  },\n  small:{\n    width:\"300px\"\n  },\n  top:{\n    width:\"1360px\"\n  }\n\n}\n\nconst avax2 = 'await Moralis.Web3API.account.getNFTTransfers(options);'\n\nconst resolveLink = (url) => {\n  if (!url || !url.includes(\"ipfs://\")) return url;\n  return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n};\n\nexport default function Wallet({ isServerInfo }) {\n  const { Moralis } = useMoralis();\n  const [hi, setHi] =useState();\n  const [vis, setVis] = useState();\n  const [avaxC, setAvaxC] = useState(false);\n  const [ethC, setEthC] = useState(true);\n  const [data, setData] = useState();\n  const [maticC, setMaticC] = useState(false);\n  const [avax1, setAvax1] = useState('const options = {chain: \"eth\", address: \"0xd8539b7bc41374ab4897256fa9a0a39c670730f0\"}');\n\n\n\n  const columns = [\n    {\n      title: 'Transfer',\n      key: 'from_address',\n      dataIndex: 'from_address',\n      render: from_address => (\n        <> \n              {from_address === \"0xd8539b7bc41374ab4897256fa9a0a39c670730f0\" ?\n              <Tag color={'volcano'} key={from_address}>\n                OUT\n              </Tag> :\n              <Tag color={'green'} key={from_address}>\n                IN\n              </Tag> \n            }\n    \n              \n            \n          \n        </>\n      ),\n    },\n    {\n      title: 'Item',\n      key: 'item',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <img src={record.image} style={{width:\"42px\", borderRadius:\"10px\"}}></img>\n          <span>#{record.id}</span>\n        </Space>\n      ),\n    },\n    {\n      title: 'Collection',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n    title: 'From',\n    key: 'from',\n    render: (text, record) => (\n      getEllipsisTxt(record.from_address, 5)\n    ),\n    },\n    {\n      title: 'To',\n      key: 'to',\n      render: (text, record) => (\n        getEllipsisTxt(record.to_address, 5)\n      ),\n      },\n      {\n        title: 'Value',\n        key: 'value',\n        render: (text, record) => (\n          <>\n          <div style={{display:\"flex\"}}>\n          <img src={eth} style={{width:\"16px\", marginRight:\"5px\"}}></img>\n         <span>{record.value / 1000000000000000000}</span> \n         </div>\n        </>),\n        },\n    /* {\n      title: 'Item',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Collection',\n      dataIndex: 'address',\n      key: 'address',\n    },\n    {\n      title: 'From',\n      key: 'tags',\n      dataIndex: 'tags',\n      render: tags => (\n        <>\n          {tags.map(tag => {\n            let color = tag.length > 5 ? 'geekblue' : 'green';\n            if (tag === 'loser') {\n              color = 'volcano';\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n     */\n  ];\n  \n\n\n\n\n  async function getNFTss(){\n    let options;\n    if(avaxC){\n      options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\"};\n    }else if(ethC){\n      options = {chain: \"eth\", address: \"0xd8539b7bc41374ab4897256fa9a0a39c670730f0\"};\n    }else{\n      options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\"};\n    }\n\n    const NFTs = await Moralis.Web3API.account.getNFTTransfers(options);\n\n    setHi(JSON.stringify(NFTs, null, 2));\n    \n    for (let NFT of NFTs.result) {\n      const ops = { address: NFT.token_address, token_id: NFT.token_id, chain: \"eth\" };\n      const tokenIdMetadata = await Moralis.Web3API.token.getTokenIdMetadata(ops);\n      console.log(tokenIdMetadata)\n      if (tokenIdMetadata?.metadata) {\n        tokenIdMetadata.metadata = JSON.parse(tokenIdMetadata.metadata);\n        NFT.image = resolveLink(tokenIdMetadata.metadata?.image);\n        NFT.name = tokenIdMetadata.name;\n        NFT.id = tokenIdMetadata.token_id;\n      }\n  }\n\n  console.log(NFTs);\n  setData(NFTs.result);\n\n  };\n\n\n  function checkAvax(){\n    setAvaxC(true);\n    setEthC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\"}');\n  }\n\n  function checkEth(){\n    setEthC(true);\n    setAvaxC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"eth\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\"}');\n  }\n\n  function checkMatic(){\n    setMaticC(true);\n    setEthC(false);\n    setAvaxC(false);\n    setAvax1('const options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\"}');\n  }\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", gap:\"20px\"}} >\n      <Title style={{textAlign:\"center\"}}> getNFTTransfers()</Title>\n      <Card\n        style={styles.card, styles.top}\n      >\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n        <div style={{padding:\"10px\", backgroundColor:\"rgb(240, 240, 240)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax1}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax2}\n        </SyntaxHighlighter>\n        </div>\n        <div>\n        <div style={{marginBottom:\"20px\", marginTop:\"20px\",marginLeft:\"70px\"}}>\n        <CheckableTag\n            checked= {ethC}\n            onChange={() => checkEth()}\n          >\n            ETH\n          </CheckableTag>\n        <CheckableTag\n            checked= {avaxC}\n            onChange={() => checkAvax()}\n          >\n            AVAX\n          </CheckableTag>\n          <CheckableTag\n            checked= {maticC}\n            onChange={() => checkMatic()}\n          >\n            MATIC\n          </CheckableTag>\n          </div>\n          <Button onClick={()=>getNFTss()} style={{marginLeft:\"120px\"}}>Run</Button>\n          </div>\n        </div>\n      </Card>\n      {vis && \n      <Table columns={columns} dataSource={data} />\n}\n      {hi &&\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\n      \n      <Card\n        style={styles.card}\n        title={\n          <>\n            📝 <Text strong>JSON Response</Text>\n          </>\n        }\n      >\n        \n        <div style={{padding:\"10px\", backgroundColor:\"rgb(40, 43, 46)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"json\" style={obsidian} wrapLongLines={true}>\n          {hi}\n        </SyntaxHighlighter>\n        </div>\n        \n      </Card>\n      <div>\n       \n        <Card\n          style={styles.card, styles.small}\n          title={\n            <>\n              🎨 <Text strong> Processed Results</Text>\n            </>}\n            \n        >\n          <Button onClick={()=>setVis(!vis)}> Show Table</Button>\n        </Card>\n      </div>\n    </div>\n}\n    </div>\n  );\n}\n","import { Card, Typography, Button, Image, Table, Tag, Space } from \"antd\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { obsidian, defaultStyle } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport { Line } from '@ant-design/charts';\n\nconst { Text, Title } = Typography;\nconst { CheckableTag } = Tag;\n\nconst styles = {\n  card: {\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n    border: \"1px solid #e7eaf3\",\n    borderRadius: \"0.5rem\",\n  },\n  small:{\n    width:\"300px\"\n  },\n  top:{\n    width:\"1360px\"\n  }\n\n}\n\nconst avax2 = 'await Moralis.Web3API.account.getNFTTransfers(options);'\n\nconst resolveLink = (url) => {\n  if (!url || !url.includes(\"ipfs://\")) return url;\n  return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n};\n\nexport default function Wallet({ isServerInfo }) {\n  const { Moralis } = useMoralis();\n  const [hi, setHi] =useState();\n  const [vis, setVis] = useState();\n  const [avaxC, setAvaxC] = useState(false);\n  const [ethC, setEthC] = useState(true);\n  //const [data, setData] = useState();\n  const [maticC, setMaticC] = useState(false);\n  const [avax1, setAvax1] = useState('const options = {chain: \"eth\", address: \"0xd8539b7bc41374ab4897256fa9a0a39c670730f0\"}');\n\n\n\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const config = {\n    data,\n    width: 1000,\n    height: 200,\n    autoFit: false,\n    xField: 'year',\n    yField: 'value',\n    point: {\n      size: 5,\n      shape: 'diamond',\n    },\n    label: {\n      style: {\n        fill: '#aaa',\n      },\n    },\n  };\n\n  let chart;\n\n\n\n\n  async function getNFTss(){\n    let options;\n    if(avaxC){\n      options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\"};\n    }else if(ethC){\n      options = { address: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", days: \"3\" };\n    }else{\n      options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\"};\n    }\n\n    \n    const NFTLowestPrice = await Moralis.Web3API.token.getNFTLowestPrice(options);\n    console.log(NFTLowestPrice)\n    setHi(JSON.stringify(NFTLowestPrice, null, 2));\n    \n  \n\n  };\n\n\n  function checkAvax(){\n    setAvaxC(true);\n    setEthC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"avalanche\", address: \"0x2cca3a1a45c1b1036d7194cd15a981b8c2f9dee4\"}');\n  }\n\n  function checkEth(){\n    setEthC(true);\n    setAvaxC(false);\n    setMaticC(false);\n    setAvax1('const options = {chain: \"eth\", address: \"0x1A92f7381B9F03921564a437210bB9396471050C\"}');\n  }\n\n  function checkMatic(){\n    setMaticC(true);\n    setEthC(false);\n    setAvaxC(false);\n    setAvax1('const options = {chain: \"polygon\", address: \"0xdC0479CC5BbA033B3e7De9F178607150B3AbCe1f\"}');\n  }\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", gap:\"20px\"}} >\n      <Title style={{textAlign:\"center\"}}> getNFTLowestPrice()</Title>\n      <Card\n        style={styles.card, styles.top}\n      >\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n        <div style={{padding:\"10px\", backgroundColor:\"rgb(240, 240, 240)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax1}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter language=\"javascript\" style={defaultStyle} wrapLongLines={true}>\n          {avax2}\n        </SyntaxHighlighter>\n        </div>\n        <div>\n        <div style={{marginBottom:\"20px\", marginTop:\"20px\",marginLeft:\"70px\"}}>\n        <CheckableTag\n            checked= {ethC}\n            onChange={() => checkEth()}\n          >\n            ETH\n          </CheckableTag>\n        <CheckableTag\n            checked= {avaxC}\n            onChange={() => checkAvax()}\n          >\n            AVAX\n          </CheckableTag>\n          <CheckableTag\n            checked= {maticC}\n            onChange={() => checkMatic()}\n          >\n            MATIC\n          </CheckableTag>\n          </div>\n          <Button onClick={()=>getNFTss()} style={{marginLeft:\"120px\"}}>Run</Button>\n          </div>\n        </div>\n      </Card>\n      <Card style={{paddingLeft:\"150px\"}}>\n      <Line {...config} onReady={(chartInstance) => (chart = chartInstance)} />\n      </Card>\n      {hi &&\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\n      \n      <Card\n        style={styles.card}\n        title={\n          <>\n            📝 <Text strong>JSON Response</Text>\n          </>\n        }\n      >\n        \n        <div style={{padding:\"10px\", backgroundColor:\"rgb(40, 43, 46)\", borderRadius:\"8px\", width:\"1000px\"}}>\n        <SyntaxHighlighter language=\"json\" style={obsidian} wrapLongLines={true}>\n          {hi}\n        </SyntaxHighlighter>\n        </div>\n        \n      </Card>\n      <div>\n       \n        <Card\n          style={styles.card, styles.small}\n          title={\n            <>\n              🎨 <Text strong> Processed Results</Text>\n            </>}\n            \n        >\n          <Button onClick={()=>setVis(!vis)}> Show Table</Button>\n        </Card>\n      </div>\n    </div>\n}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/nftapi.4dfdc8e0.png\";","import { useEffect } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Account from \"components/Account/Account\";\nimport Chains from \"components/Chains\";\nimport Wallet from \"components/Wallet\";\nimport { Layout } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport NativeBalance from \"components/NativeBalance\";\nimport \"./style.css\";\nimport QuickStart from \"components/QuickStart\";\nimport Text from \"antd/lib/typography/Text\";\nimport MenuItems from \"./components/MenuItems\";\nimport Ramper from \"components/Ramper\";\nimport NFTBalance from \"components/NFTBalance\";\nimport nft from \"nftapi.png\"\nconst { Header, Footer } = Layout;\n\nconst styles = {\n  content: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    fontFamily: \"Roboto, sans-serif\",\n    color: \"#041836\",\n    marginTop: \"130px\",\n    padding: \"10px\",\n  },\n  header: {\n    position: \"fixed\",\n    zIndex: 1,\n    width: \"100%\",\n    background: \"#fff\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    fontFamily: \"Roboto, sans-serif\",\n    borderBottom: \"2px solid rgba(0, 0, 0, 0.06)\",\n    padding: \"0 10px\",\n    boxShadow: \"0 1px 10px rgb(151 164 175 / 10%)\",\n  },\n  headerRight: {\n    display: \"flex\",\n    gap: \"20px\",\n    alignItems: \"center\",\n    fontSize: \"15px\",\n    fontWeight: \"600\",\n  },\n};\nconst App = ({ isServerInfo }) => {\n  const { isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading } = useMoralis();\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(\"connectorId\");\n    if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) enableWeb3({ provider: connectorId });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, isWeb3Enabled]);\n\n  return (\n    <Layout style={{ height: \"100vh\", overflow: \"auto\" }}>\n      <Router>\n        <Header style={styles.header}>\n          <Logo />\n          \n          <MenuItems />\n          <div style={styles.headerRight}>\n{/*             <Chains />\n            <NativeBalance /> */}\n            <img src={nft} alt=\"\" style={{height:\"30px\"}}></img>\n          </div>\n        </Header>\n\n        <div style={styles.content}>\n          <Switch>\n            <Route exact path=\"/tokens\">\n              <QuickStart isServerInfo={isServerInfo} />\n            </Route>\n            <Route path=\"/owners\">\n              <Wallet />\n            </Route>\n            <Route path=\"/price\">\n              <NFTBalance />\n            </Route>\n            <Route path=\"/transfers\">\n              <Ramper />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to=\"/tokens\" />\n            </Route>\n            <Route path=\"/ethereum-boilerplate\">\n              <Redirect to=\"/tokens\" />\n            </Route>\n            <Route path=\"/nonauthenticated\">\n              <>Please login using the \"Authenticate\" button</>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n      <Footer style={{ textAlign: \"center\" }}>\n        <Text style={{ display: \"block\" }}>\n          ⭐️ Please star this{\" \"}\n          <a href=\"https://github.com/ethereum-boilerplate/ethereum-boilerplate/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            boilerplate\n          </a>\n          , every star makes us very happy!\n        </Text>\n\n        <Text style={{ display: \"block\" }}>\n          🙋 You have questions? Ask them on the {\"\"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://forum.moralis.io/t/ethereum-boilerplate-questions/3951/29\">\n            Moralis forum\n          </a>\n        </Text>\n\n        <Text style={{ display: \"block\" }}>\n          📖 Read more about{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://moralis.io?utm_source=boilerplatehosted&utm_medium=todo&utm_campaign=ethereum-boilerplat\"\n          >\n            Moralis\n          </a>\n        </Text>\n      </Footer>\n    </Layout>\n  );\n};\n\nexport const Logo = () => (\n  <div style={{ display: \"flex\" }}>\n    <svg width=\"60\" height=\"38\" viewBox=\"0 0 50 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M43.6871 32.3986C43.5973 32.4884 43.53 32.5782 43.4402 32.6905C43.53 32.6007 43.5973 32.5109 43.6871 32.3986Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M49.7037 14.3715C49.5241 6.2447 42.7891 -0.17592 34.6624 0.00367768C31.0031 0.0934765 27.4784 1.53026 24.8294 4.06708C22.113 1.46291 18.4986 0.00367768 14.727 0.00367768C6.71246 0.00367768 0.202047 6.49164 0 14.5511V14.6633C0 20.8146 2.24497 26.2698 4.26545 30.0189C5.11853 31.5904 6.08387 33.117 7.13901 34.5762C7.5431 35.115 7.8574 35.564 8.10435 35.8559L8.39619 36.2151L8.48599 36.3273L8.50844 36.3498L8.53089 36.3722C10.2146 38.3253 13.1555 38.5498 15.1087 36.8886C15.1311 36.8661 15.1536 36.8437 15.176 36.8212C17.1291 35.0701 17.3312 32.0843 15.625 30.1087L15.6026 30.0638L15.423 29.8618C15.2658 29.6597 15.0189 29.3455 14.727 28.9414C13.9188 27.8189 13.178 26.6515 12.5269 25.4392C10.8881 22.4309 9.42888 18.6145 9.42888 14.7531C9.49623 11.8347 11.9432 9.52236 14.8617 9.58971C17.7128 9.65705 19.9802 11.9694 20.0251 14.8205C20.0476 15.5389 20.2272 16.2348 20.5415 16.8859C21.4844 19.3104 24.2232 20.5227 26.6478 19.5798C28.4438 18.8839 29.6336 17.1553 29.6561 15.2246V14.596C29.7683 11.6775 32.2153 9.38766 35.1562 9.47746C37.94 9.56726 40.1625 11.8122 40.2748 14.596C40.2523 17.6941 39.2645 20.7472 38.1421 23.1718C37.6931 24.1371 37.1992 25.08 36.6379 25.978C36.4359 26.3147 36.2787 26.5617 36.1665 26.6964C36.1216 26.7862 36.0767 26.8311 36.0542 26.8535L36.0318 26.876L35.9869 26.9433C37.6033 24.9004 40.5442 24.5412 42.5871 26.1576C44.4953 27.6617 44.9443 30.3781 43.6198 32.4211L43.6422 32.4435V32.3986L43.6647 32.3762L43.732 32.2864C43.7769 32.1966 43.8667 32.1068 43.9565 31.9721C44.1361 31.7027 44.3606 31.3435 44.6525 30.8945C45.3933 29.6822 46.0668 28.4026 46.673 27.1229C48.1097 24.0249 49.6812 19.5349 49.6812 14.5286L49.7037 14.3715Z\"\n        fill=\"#041836\"\n      />\n      <path\n        d=\"M39.7135 25.1249C37.1094 25.1025 34.9991 27.2127 34.9766 29.8169C34.9542 32.4211 37.0645 34.5313 39.6686 34.5538C41.1503 34.5538 42.5647 33.8578 43.4626 32.6905C43.53 32.6007 43.5973 32.4884 43.6871 32.3986C45.1015 30.221 44.4729 27.3025 42.2953 25.9107C41.532 25.3943 40.634 25.1249 39.7135 25.1249Z\"\n        fill=\"#B7E803\"\n      />\n    </svg>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { MoralisProvider } from \"react-moralis\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport QuickStart from \"components/QuickStart\";\n\n/** Get your free Moralis Account https://moralis.io/ */\n\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nconst Application = () => {\n  const isServerInfo = APP_ID && SERVER_URL ? true : false;\n  //Validate\n  if (!APP_ID || !SERVER_URL)\n    throw new Error(\n      \"Missing Moralis Application ID or Server URL. Make sure to set your .env file.\"\n    );\n  if (isServerInfo)\n    return (\n      <MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\n        <App isServerInfo />\n      </MoralisProvider>\n    );\n  else {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <QuickStart />\n      </div>\n    );\n  }\n};\n\nReactDOM.render(\n  <StrictMode>\n    <Application />,\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}